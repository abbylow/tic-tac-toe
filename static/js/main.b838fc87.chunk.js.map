{"version":3,"sources":["component/square.jsx","component/board.jsx","service/calculateWinner.js","service/minimax.js","component/game.jsx","index.js"],"names":["Square","props","className","onClick","bold","value","Board","i","highlight","key","this","squares","board","k","boardSize","row","m","wonLine","length","indexOf","push","renderSquare","renderBoard","React","Component","calculateWinner","finalWinner","finalWonLine","hrzRow","hrzWonLine","hrzWinner","hrzCol","vtcCol","vtcWonLine","vtcWinner","vtcRow","ltrWinner","ltrWonLine","count","rtlWinner","rtlWonLine","finalScore","winner","score","minimax","depth","isMaximizingPlayer","alpha","beta","winnerScore","isMovesLeft","bestVal","Math","max","min","Game","changeBoardSize","e","setState","sizeInput","target","reflectBoardSize","state","history","arrSize","pow","parseInt","Array","fill","location","col","alert","changeGameMode","gameMode","findBestAiMove","xMove","bestMove","moveVal","slice","stepNumber","concat","xIsNext","isAsc","step","status","current","moves","map","move","desc","jumpTo","filter","el","handleClick","restart","sort","reverse","type","name","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b838fc87.chunk.js","sourcesContent":["import React from 'react';\n\nexport function Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.bold ? <b>{props.value}</b> : <div>{props.value}</div>}\n    </button>\n  );\n}\n","import React from 'react';\nimport { Square } from \".\";\n\nexport class Board extends React.Component {\n\n  renderSquare(i, highlight) {\n    return <Square key={`square-${i}`} bold={highlight} value={this.props.squares[i]} onClick={() => { this.props.onClick(i) }} />;\n  }\n\n  renderBoard() {\n    let board = [];\n    for (let k = 0; k < this.props.boardSize; k++) {\n      let row = [];\n      for (let m = 0; m < this.props.boardSize; m++) {\n        let i = (this.props.boardSize * k) + m;\n        let highlight = false;\n        if (this.props.wonLine.length > 0 && this.props.wonLine.indexOf(i) > -1) {\n          highlight = true;\n        }\n        row.push(this.renderSquare(i, highlight));\n      }\n      board.push(<div className=\"board-row\" key={`row-${k}`}>{row}</div>);\n    }\n    return board;\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderBoard()}\n      </div>\n    );\n  }\n}","export function calculateWinner(squares, boardSize) {\n  let finalWinner = null;\n  let finalWonLine = [];\n\n  // Check the horizontal lines \n  let hrzRow = 0;\n  while (hrzRow < boardSize && !finalWinner) {\n    let hrzWonLine = [(boardSize * hrzRow) + 0];\n    let hrzWinner = squares[(boardSize * hrzRow) + 0];\n    let hrzCol = 1;\n    while (hrzCol < boardSize && hrzWinner) {\n      let k = (boardSize * hrzRow) + hrzCol;\n      if (hrzWinner !== squares[k]) {\n        hrzWinner = null;\n      }\n      hrzWonLine.push(k);\n      hrzCol++;\n    }\n    if (hrzWinner) {\n      finalWinner = hrzWinner;\n      finalWonLine = hrzWonLine;\n    }\n    hrzRow++;\n  }\n\n  // Check the vertical lines \n  let vtcCol = 0;\n  while (vtcCol < boardSize && !finalWinner) {\n    let vtcWonLine = [(boardSize * 0) + vtcCol];\n    let vtcWinner = squares[(boardSize * 0) + vtcCol];\n    let vtcRow = 1;\n    while (vtcRow < boardSize && vtcWinner) {\n      let k = (boardSize * vtcRow) + vtcCol;\n      if (vtcWinner !== squares[k]) {\n        vtcWinner = null;\n      }\n      vtcWonLine.push(k);\n      vtcRow++;\n    }\n    if (vtcWinner) {\n      finalWinner = vtcWinner;\n      finalWonLine = vtcWonLine;\n    }\n    vtcCol++;\n  }\n\n  // Check the diagonal line (left top to right bottom)\n  let ltrWinner = squares[0];\n  if (!finalWinner && ltrWinner) {\n    let ltrWonLine = [0];\n    for (let count = 1; count < boardSize; count++) {\n      let k = (boardSize * count) + count;\n      if (ltrWinner !== squares[k]) {\n        ltrWinner = null;\n        break;\n      }\n      ltrWonLine.push(k);\n    }\n    if (ltrWinner) {\n      finalWinner = ltrWinner;\n      finalWonLine = ltrWonLine;\n    }\n  }\n\n  // Check the diagonal line (right top to left bottom)\n  let rtlWinner = squares[(boardSize * (boardSize - 1))];\n  if (!finalWinner && rtlWinner) {\n    let rtlWonLine = [boardSize * (boardSize - 1)];\n    for (let count = 1; count < boardSize; count++) {\n      let k = (boardSize * (boardSize - 1 - count)) + count;\n      if (rtlWinner !== squares[k]) {\n        rtlWinner = null;\n        break;\n      }\n      rtlWonLine.push(k);\n    }\n    if (rtlWinner) {\n      finalWinner = rtlWinner;\n      finalWonLine = rtlWonLine;\n    }\n  }\n\n  let finalScore = 0;\n  if (finalWinner) {\n    finalScore = finalWinner === 'X' ? -10 : 10;\n  }\n  return { winner: finalWinner, wonLine: finalWonLine, score: finalScore };\n}","import { calculateWinner } from \"./calculateWinner\";\n\nexport function minimax(board, boardSize, depth, isMaximizingPlayer, alpha, beta) {\n  let winnerScore = calculateWinner(board, boardSize).score;\n  if (winnerScore === 10) {\n    return winnerScore - depth;\n  }\n\n  if (winnerScore === -10) {\n    return winnerScore + depth;\n  }\n\n  if (!isMovesLeft(board)) {\n    return 0; //draw\n  }\n\n  //to prevent the program running forever\n  if (depth > 5) {\n    return 0; \n  }\n\n  if (isMaximizingPlayer) {\n    let bestVal = -100;\n    for (let k in board) {\n      if (!board[k]) {\n        board[k] = 'O';\n        let value = minimax(board, boardSize, depth + 1, !isMaximizingPlayer, alpha, beta);\n        bestVal = Math.max(bestVal, value);\n        alpha = Math.max(alpha, bestVal);\n        board[k] = null;\n        if (beta <= alpha){\n          break;\n        }\n      }\n    }\n    return bestVal;\n  }\n  else {\n    let bestVal = 100;\n    for (let k in board) {\n      if (!board[k]) {\n        board[k] = 'X';\n        let value = minimax(board, boardSize, depth + 1, !isMaximizingPlayer, alpha, beta);\n        bestVal = Math.min(bestVal, value);\n        beta = Math.min(beta, bestVal);\n        board[k] = null;\n        if (beta <= alpha){\n          break;\n        }\n      }\n    }\n    return bestVal;\n  }\n}\n\nexport function isMovesLeft(board) {\n  for (let k in board) {\n    if (!board[k]) {\n      return true;\n    }\n  }\n  return false;\n}","import React from 'react';\nimport { Board } from \".\";\nimport { calculateWinner } from \"../service/calculateWinner\";\nimport { minimax, isMovesLeft } from '../service/minimax';\n\nexport class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{ squares: Array(9).fill(null), location: { col: null, row: null } }],\n      xIsNext: true,\n      stepNumber: 0,\n      isAsc: true,\n      boardSize: 3,\n      sizeInput: 3,\n      gameMode: 0,  //0 = AI, 1 = Human\n    }\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    const { boardSize, xIsNext, gameMode } = this.state;\n    if (calculateWinner(squares, boardSize).winner || squares[i]) {\n      return;\n    }\n    squares[i] = xIsNext ? 'X' : 'O';\n    if (xIsNext && !gameMode && isMovesLeft(squares)) {\n      this.findBestAiMove(squares, boardSize, i);\n    }\n    else {\n      this.setState({\n        history: history.concat({ squares, location: { col: i % boardSize, row: parseInt(i / boardSize) } }),\n        xIsNext: !xIsNext,\n        stepNumber: history.length,\n      });\n    }\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    })\n  }\n\n  sort() {\n    this.setState({ isAsc: !this.state.isAsc });\n  }\n\n  restart() {\n    const arrSize = Math.pow(parseInt(this.state.sizeInput), 2);\n    this.setState({\n      history: [{ squares: Array(arrSize).fill(null), location: { col: null, row: null } }],\n      xIsNext: true,\n      stepNumber: 0,\n      isAsc: true,\n    });\n  }\n\n  changeBoardSize = (e) => {\n    this.setState({ sizeInput: e.target.value });\n  }\n\n  reflectBoardSize = () => {\n    const sizeInput = this.state.sizeInput;\n    if (this.state.history.length === 1) {\n      if (sizeInput > 2 && sizeInput < 6) {\n        const arrSize = Math.pow(parseInt(sizeInput), 2);\n        this.setState({\n          boardSize: sizeInput,\n          history: [{ squares: Array(arrSize).fill(null), location: { col: null, row: null } }],\n        })\n      }\n      else {\n        alert(\"Can only change the board size between 3 to 5.\")\n      }\n    }\n    else {\n      alert(\"Can only change the board size before game starts.\")\n    }\n  }\n\n  changeGameMode = () => {\n    if (this.state.history.length === 1) {\n      this.setState({ gameMode: !this.state.gameMode })\n    }\n    else {\n      alert(\"Can only change the mode before game starts.\")\n    }\n  }\n\n  findBestAiMove = (squares, boardSize, xMove) => {\n    let bestVal = -1000;\n    let bestMove = -1;\n    for (let k in squares) {\n      if (!squares[k]) {\n        squares[k] = 'O';\n        let moveVal = minimax(squares, boardSize, 0, false, -1000, 1000);\n        squares[k] = null;\n        if (moveVal > bestVal) {\n          bestMove = k;\n          bestVal = moveVal;\n        }\n      }\n    }\n    squares[bestMove] = 'O';\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    this.setState({\n      history: history.concat({ squares, location: { col: xMove % boardSize, row: parseInt(xMove / boardSize) } }),\n      xIsNext: true,\n      stepNumber: history.length,\n    });\n  }\n\n  render() {\n    const { history, boardSize, sizeInput, gameMode } = this.state;\n    const current = history[this.state.stepNumber];\n    const { winner, wonLine } = calculateWinner(current.squares, boardSize);\n\n    const moves = history.map((step, move) => {\n      const desc = move ? `Go to move # ${move} ( ${step.location.col} , ${step.location.row})` : \"Go to game start\";\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>\n            {move === this.state.stepNumber ? (<b>{desc}</b>) : desc}\n          </button>\n        </li>\n      )\n    })\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    }\n    else if (current.squares.filter(el => el === null).length === 0) {\n      status = 'It is a Draw';\n    }\n    else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board squares={current.squares} wonLine={wonLine} boardSize={boardSize} onClick={(i) => this.handleClick(i)} />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <button onClick={() => this.restart()}>Restart the game</button>\n          <button onClick={() => this.sort()}>Toggle order</button>\n          <button onClick={() => this.changeGameMode()}>{gameMode ? 'Change O = AI opponent' : 'Change O = human opponent'}</button>\n          <ol>{this.state.isAsc ? moves : moves.reverse()}</ol>\n\n          Board Size: <input type=\"number\" name=\"boardSize\" value={sizeInput} onChange={this.changeBoardSize} />\n          <button onClick={() => this.reflectBoardSize()}>Confirm</button>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Game } from \"./component\";\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}